@page "/"
@inject HttpClient httpClient

<DxButton Click="@(() => AccountingGrid.StartEditNewRowAsync())" style="float:right;" Text="Добавить" />
<DxGrid Data="Accountings"
        @ref="AccountingGrid"
        EditMode="GridEditMode.PopupEditForm"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        EditModelSaving="IssuerAddressEditMode"
        AllowSelectRowByClick="false"
        CustomizeCellDisplayText="Grid_Customize"
        EditFormButtonsVisible="false"
        UnboundColumnData="Grid_UnboundColumnData">
    <Columns>
        <DxGridCommandColumn Width="90px" DeleteButtonVisible="false" NewButtonVisible="false" ClearFilterButtonVisible="false">
            <CellDisplayTemplate>
                <DxButton type="button" CssClass="btn" @onclick="@(() => AccountingGrid.StartEditDataItemAsync(context.DataItem))" Text="Изменить"/>
            </CellDisplayTemplate>
        </DxGridCommandColumn>
        <DxGridDataColumn FieldName="IncomeExpensesId" Caption="Категория доходов и расходов"/>
        <DxGridDataColumn FieldName="CategoryIncomeExpensesId" Caption="Доход/Расход"/>
        <DxGridDataColumn FieldName="Sum" Caption="Сумма"/>
        <DxGridDataColumn FieldName="AddedDate" Caption="Дата добавления" DisplayFormat="dddd, dd MMMM yyyy HH:mm:ss"/>
        <DxGridDataColumn FieldName="Note" Caption="Примечания"/>
    </Columns>
    <TotalSummary>
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Sum"  Name="Общая сумма" />
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Max" FieldName="Sum"  Name="Маскимальная сумма" />
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Min" FieldName="Sum"  Name="Минимальная сумма" />
    </TotalSummary>
    <EditFormTemplate Context="EditFormContexts">
        @{
            accountingModel = (AccountingModel)EditFormContexts.EditModel;
        }
        <DxFormLayout CaptionPosition="CaptionPosition.Vertical">
            <DxFormLayoutItem Caption="Категория доходов и расходов" Context="FormLayoutContext" CaptionCssClass="required-caption">
                <DxComboBox Data="expensesIncome"
                            TextFieldName="@nameof(IncomeExpense.Name)"
                            ValueFieldName="@nameof(IncomeExpense.Id)"
                            @bind-Value="accountingModel.IncomeExpensesId" 
                            SelectedItemChanged="@((IncomeExpense incomeExpense) => OnchangeIncomeExpense(incomeExpense))"/>
                           <ValidationMessage For="@(() => accountingModel.IncomeExpensesId)"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Доход/Расход" Context="FormLayoutContext" CaptionCssClass="required-caption">
                <DxComboBox Data="categoryIncomeExpenses"
                            TextFieldName="@nameof(CategoryIncomeExpenses.Name)"
                            ValueFieldName="@nameof(CategoryIncomeExpenses.Id)"
                            @bind-Value="accountingModel.CategoryIncomeExpensesId" 
                            ReadOnly="true"/>
                           <ValidationMessage For="@(() => accountingModel.CategoryIncomeExpensesId)"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Cумма" Context="FormLayoutContext" CaptionCssClass="required-caption">
                <DxSpinEdit @bind-Value="accountingModel.Sum" />
                <ValidationMessage For="@(() => accountingModel.Sum)"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Дата добавления" Context="FormLayoutContext" CaptionCssClass="required-caption">
                <DxDateEdit @bind-Date="@accountingModel.AddedDate" ReadOnly="true"/>
                <ValidationMessage For="@(() => accountingModel.AddedDate)"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Caption="Примечания" Context="FormLayoutContext" ColSpanMd="12">
                <DxMemo @bind-Text="accountingModel.Note" />
                <ValidationMessage For="@(() => accountingModel.Note)"/>
            </DxFormLayoutItem>

            <DxFormLayoutItem Context="FormLayoutContext" ColSpanMd="12">
                <div class="float-right">
                    <DxButton SubmitFormOnClick="true" RenderStyle="ButtonRenderStyle.Primary" Text="Обновить" />
                    <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Отмена" Click="@(() => AccountingGrid.CancelEditAsync())" />
                </div>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>
@code {
    bool expensesReadonly = true;
    bool IncomeReadonly = true;
    AccountingModel accountingModel { get; set; }
    private List<AccountingModel> Accountings = new List<AccountingModel>();
    private List<IncomeExpense> expensesIncome = new List<IncomeExpense>();
    private List<CategoryIncomeExpenses> categoryIncomeExpenses = new List<CategoryIncomeExpenses>();
    private IGrid AccountingGrid;

    protected override async Task OnInitializedAsync()
    {
        Accountings = await httpClient.GetFromJsonAsync<List<AccountingModel>>("api/Base/Accounting/GetAll");
        expensesIncome = await httpClient.GetFromJsonAsync<List<IncomeExpense>>("api/Base/IncomeExpenses/GetAll");
        categoryIncomeExpenses = await httpClient.GetFromJsonAsync<List<CategoryIncomeExpenses>>("api/Base/CategoryIncomeExpenses/GetAll");
    }

    async Task IssuerAddressEditMode(GridEditModelSavingEventArgs e)
    {
        var response = await httpClient.PostAsJsonAsync("api/Base/Accounting/UpdateOrAdd", (AccountingModel)e.EditModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AccountingModel>();
            await AccountingGrid.CancelEditAsync();
            if (e.IsNew)
                Accountings.Add(result);
            StateHasChanged();
            Accountings = await httpClient.GetFromJsonAsync<List<AccountingModel>>("api/Base/Accounting/GetAll");
            AccountingGrid.RefreshSummary();
        }
    }

    void Grid_Customize(GridCustomizeCellDisplayTextEventArgs e)
    {
        if (e.FieldName == "IncomeExpensesId")
            e.DisplayText = expensesIncome.Where(c => c.Id == (int)e.Value).FirstOrDefault()?.Name;
        if (e.FieldName == "CategoryIncomeExpensesId")
            e.DisplayText = categoryIncomeExpenses.Where(c => c.Id == (int)e.Value).FirstOrDefault()?.Name;
    }

    void OnchangeIncomeExpense(IncomeExpense income)
    {
        accountingModel.CategoryIncomeExpensesId = income.CategoryIncomeExpensesId;
    }

    void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e) {
        if(e.FieldName == "Sum") {
            double sum = (double)e.GetRowValue("Sum");
            DateTime today = DateTime.Now.Date;
            DateTime oneMothAgo = today.AddMonths(-1);
            bool isOk = (DateTime)e.GetRowValue("AddedDate") <= oneMothAgo;
        }
    }
}